name: Build Executables

on:
  release:
    types: [created]
  workflow_dispatch:  # Allow manual trigger
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
        pip install -r requirements.txt

    - name: Build with PyInstaller
      run: |
        cd backend
        pyinstaller tagger.spec --distpath ../build-output/dist --workpath ../build-output/build

    - name: Create ZIP archive and split into chunks
      run: |
        cd build-output/dist
        powershell Compress-Archive -Path ai-image-tagger -DestinationPath ai-image-tagger-windows.zip
        powershell -Command "$inputFile = 'ai-image-tagger-windows.zip'; $chunkSize = 1500MB; $stream = [System.IO.File]::OpenRead($inputFile); $buffer = New-Object byte[] $chunkSize; $partNum = 0; while (($bytesRead = $stream.Read($buffer, 0, $buffer.Length)) -gt 0) { $outputFile = \"ai-image-tagger-windows.zip.part-\" + ([string]$partNum).PadLeft(2, '0'); [System.IO.File]::WriteAllBytes($outputFile, $buffer[0..($bytesRead-1)]); $partNum++ }; $stream.Close()"
        del ai-image-tagger-windows.zip
        echo @echo off > extract-windows.bat
        echo echo Extracting AI Image Tagger for Windows... >> extract-windows.bat
        echo copy /b ai-image-tagger-windows.zip.part-* ai-image-tagger-windows.zip >> extract-windows.bat
        echo echo Extracting archive... >> extract-windows.bat
        echo powershell Expand-Archive -Path ai-image-tagger-windows.zip -DestinationPath . >> extract-windows.bat
        echo echo Done! Run ai-image-tagger\ai-image-tagger.exe to start >> extract-windows.bat
        echo del ai-image-tagger-windows.zip >> extract-windows.bat

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: ai-image-tagger-windows
        path: |
          build-output/dist/ai-image-tagger-windows.zip.part-*
          build-output/dist/extract-windows.bat

  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
        pip install -r requirements.txt

    - name: Build with PyInstaller
      run: |
        cd backend
        pyinstaller tagger.spec --distpath ../build-output/dist --workpath ../build-output/build

    - name: Create tar.gz archive and split into chunks
      run: |
        cd build-output/dist
        tar -czf ai-image-tagger-linux.tar.gz ai-image-tagger/
        split -b 1500M ai-image-tagger-linux.tar.gz ai-image-tagger-linux.tar.gz.part-
        rm ai-image-tagger-linux.tar.gz
        cat > extract-linux.sh << 'EOF'
        #!/bin/bash
        echo "Extracting AI Image Tagger for Linux..."
        cat ai-image-tagger-linux.tar.gz.part-* > ai-image-tagger-linux.tar.gz
        echo "Extracting archive..."
        tar -xzf ai-image-tagger-linux.tar.gz
        echo "Done! Run ./ai-image-tagger/ai-image-tagger to start"
        rm ai-image-tagger-linux.tar.gz
        EOF
        chmod +x extract-linux.sh

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: ai-image-tagger-linux
        path: |
          build-output/dist/ai-image-tagger-linux.tar.gz.part-*
          build-output/dist/extract-linux.sh

  build-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create frontend archive
      run: |
        zip -r ai-image-tagger-frontend.zip frontend/

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: ai-image-tagger-frontend
        path: ai-image-tagger-frontend.zip

    - name: Upload to Release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ai-image-tagger-frontend.zip
        asset_name: ai-image-tagger-frontend-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip
